name: AtomUI Release Pipeline
on:
   workflow_dispatch:
      inputs:
         TargetBranch:
            description: 'Target branch to build'
            type: string
            default: 'develop'
         BuildConfiguration:
            description: 'Build configuration'
            type: string
            default: 'Release'
         PublishToNuget:
            description: 'Publish to nuget.org'
            type: boolean
            default: false
env:
   SOURCE_DIR: ${{ github.workspace }}
   BASE_OUTPUT_DIR: ${{ github.workspace }}/output
   LOCAL_NUGET_DIR: ${{ github.workspace }}/nuget
jobs:
   BuildAtomUINuget:
      name: Build AtomUI NuGet packages
      runs-on: windows-latest
      steps:
         -  name: Checkout code
            uses: actions/checkout@v4.2.2
            with:
               ref: ${{ inputs.TargetBranch }}
         -  name: Create local NuGet feed
            run: |
               $localFeedPath = $env:LOCAL_NUGET_DIR
               New-Item -Path $localFeedPath -ItemType Directory -Force | Out-Null
               Write-Output "Local NuGet feed created at: $localFeedPath"
               dotnet nuget add source $localFeedPath --name local-feed
               $sources = dotnet nuget list source
               if ($sources -match "local-feed") {
                  Write-Output "Local feed added successfully"
               } else {
                  Write-Error "Failed to add local feed"
                  exit 1
               }
         -  name: Build AtomUI projects
            shell: pwsh
            run: |
               # Build AtomUI project
               dotnet build --configuration ${{ inputs.BuildConfiguration }} ./packages/AtomUI/AtomUI.csproj
         -  name: Create AtomUI NuGet packages
            shell: pwsh
            run: |
               $projects = @(
                  "./packages/AtomUI/AtomUI.csproj",
                  "./src/AtomUI.IconPkg.Generator/AtomUI.IconPkg.Generator.csproj",
                  "./src/AtomUI.Generator/AtomUI.Generator.csproj"
               )
               foreach ($project in $projects) {
                  dotnet pack --no-build --output $env:BASE_OUTPUT_DIR --configuration ${{ inputs.BuildConfiguration }} $project
               }
               $packages = Get-ChildItem -Path $env:BASE_OUTPUT_DIR -Filter *.nupkg -Recurse -File
               foreach ($pkg in $packages) {
                  try {
                     dotnet nuget push $pkg.FullName --source $env:LOCAL_NUGET_DIR
                     if ($LASTEXITCODE -ne 0) {
                        Write-Warning "pushed nuget package: $($pkg.Name)"
                     }
                  }
                  catch {
                      Write-Error "push $($pkg.Name) error: $_"
                  }
               }
         -  name: Build AtomUI Extensions projects
            shell: pwsh
            run: |
               dotnet build --configuration ${{ inputs.BuildConfiguration }} ./src/AtomUI.Controls.DataGrid/AtomUI.Controls.DataGrid.csproj
               dotnet build --configuration ${{ inputs.BuildConfiguration }} ./src/AtomUI.Controls.ColorPicker/AtomUI.Controls.ColorPicker.csproj
         -  name: Create AtomUI Extensions NuGet packages
            shell: pwsh
            run: |
               dotnet pack --no-build --output $env:BASE_OUTPUT_DIR --configuration ${{ inputs.BuildConfiguration }} ./src/AtomUI.Controls.DataGrid/AtomUI.Controls.DataGrid.csproj
               dotnet pack --no-build --output $env:BASE_OUTPUT_DIR --configuration ${{ inputs.BuildConfiguration }} ./src/AtomUI.Controls.ColorPicker/AtomUI.Controls.ColorPicker.csproj
         -  name: Upload NuGet artifacts
            uses: actions/upload-artifact@v4.6.2
            with:
               name: NuGetPackages
               path: ${{ env.BASE_OUTPUT_DIR }}/*.nupkg
         -  name: Publish to nuget.org
            if: ${{ inputs.PublishToNuget == true }}
            shell: pwsh
            run: |
               $packages = Get-ChildItem -Path $env:BASE_OUTPUT_DIR -Filter *.nupkg -Recurse -File
               foreach ($pkg in $packages) {
                  try {
                     dotnet nuget push $pkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
                     if ($LASTEXITCODE -ne 0) {
                        Write-Warning "pushed nuget package: $($pkg.Name)"
                     }
                  }
                  catch {
                      Write-Error "push $($pkg.Name) error: $_"
                  }
               }
