<ResourceDictionary
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:atom="https://atomui.net"
    x:ClassModifier="internal">
    <ControlTheme x:Key="{x:Type atom:Alert}" TargetType="atom:Alert">
        <Setter Property="Template">
            <ControlTemplate>
                <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                    <Grid RowDefinitions="Auto"
                          ColumnDefinitions="Auto, *, Auto, Auto">
                        <StackPanel Grid.Row="0"
                                    Grid.Column="1"
                                    Orientation="Vertical"
                                    VerticalAlignment="Center"
                                    ClipToBounds="True">
                            <Label Name="MessageLabel"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Left"
                                   VerticalContentAlignment="Center"
                                   Padding="0"
                                   TextBlock.TextWrapping="Wrap"
                                   Content="{TemplateBinding Message}" />
                            <atom:MarqueeLabel
                                Name="MarqueeLabel"
                                HorizontalAlignment="Stretch"
                                Padding="0"
                                IsVisible="{TemplateBinding IsMessageMarqueEnabled}"
                                Text="{TemplateBinding Message}" />
                            <Label Name="DescriptionLabel"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Left"
                                   VerticalContentAlignment="Center"
                                   Padding="0"
                                   IsVisible="{TemplateBinding Description, Converter={x:Static StringConverters.IsNotNullOrEmpty}}"
                                   TextBlock.TextWrapping="Wrap"
                                   Content="{TemplateBinding Description}" />

                        </StackPanel>
                        <atom:IconButton
                            Name="CloseBtn"
                            IsVisible="{TemplateBinding IsClosable}"
                            Icon="{TemplateBinding CloseIcon}"
                            Grid.Row="0"
                            Grid.Column="3" />
                        <atom:Icon
                            Name="InfoIcon"
                            IsVisible="{TemplateBinding IsShowIcon}"
                            Grid.Row="0"
                            Grid.Column="0" />
                        <ContentPresenter Name="ExtraActionPresenter"
                                          Grid.Row="0"
                                          Grid.Column="2"
                                          IsVisible="{TemplateBinding ExtraAction, Converter={x:Static ObjectConverters.IsNotNull}}"
                                          Content="{TemplateBinding ExtraAction}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>
        
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static atom:SharedTokenKey.BorderRadiusLG}}" />
        <Style Selector="^:has-extra-action">
            <Setter Property="VerticalAlignment" Value="Top"/>
        </Style>
 
        <Style Selector="^[Type=Success]">
            <Setter Property="Background" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorSuccessBg}}" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorSuccessBorder}}" />
        </Style>

        <Style Selector="^[Type=Info]">
            <Setter Property="Background" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorInfoBg}}" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorInfoBorder}}" />
        </Style>

        <Style Selector="^[Type=Warning]">
            <Setter Property="Background" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorWarningBg}}" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorWarningBorder}}" />
        </Style>

        <Style Selector="^[Type=Error]">
            <Setter Property="Background" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorErrorBg}}" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorErrorBorder}}" />
        </Style>

        <Style Selector="^:not(:has-description)">
            <Setter Property="Padding" Value="{DynamicResource {x:Static atom:AlertTokenKey.DefaultPadding}}" />
        </Style>

        <Style Selector="^:has-description">
            <Setter Property="Padding" Value="{DynamicResource {x:Static atom:AlertTokenKey.WithDescriptionPadding}}" />
        </Style>
        
        <Style Selector="^:has-description">
            <Style Selector="^ /template/ Label#MessageLabel, ^ /template/ atom|MarqueeLabel#MarqueeLabel">
                <Setter Property="TemplatedControl.FontSize"
                        Value="{DynamicResource {x:Static atom:SharedTokenKey.FontSizeLG}}" />
                <Setter Property="TemplatedControl.VerticalAlignment" Value="Top" />
            </Style>
        </Style>
        <Style Selector="^:not(:has-description)">
            <Style Selector="^ /template/ Label#MessageLabel, ^ /template/ atom|MarqueeLabel#MarqueeLabel">
                <Setter Property="TemplatedControl.FontSize"
                        Value="{DynamicResource {x:Static atom:SharedTokenKey.FontSize}}" />
                <Setter Property="TemplatedControl.VerticalAlignment" Value="Stretch" />
            </Style>
        </Style>
        <Style Selector="^ /template/ Label#MessageLabel">
            <Setter Property="TextBox.LineHeight" Value="{DynamicResource {x:Static atom:SharedTokenKey.FontHeight}}" />
        </Style>
        <!-- 根据是否显示 MarqueeLabel 是指对应的样式 -->
        <Style Selector="^[IsMessageMarqueEnabled=True]">
            <Style Selector="^ /template/ Label#MessageLabel">
                <Setter Property="IsVisible" Value="False" />
            </Style>
        </Style>
        
        <Style Selector="^ /template/ Label#DescriptionLabel">
            <Setter Property="TextBox.LineHeight" Value="{DynamicResource {x:Static atom:SharedTokenKey.FontHeight}}" />
            <Setter Property="Margin" Value="{DynamicResource {x:Static atom:AlertTokenKey.DescriptionLabelMargin}}" />
        </Style>
 
        <Style Selector="^:has-description">
            <Style Selector="^ /template/ atom|IconButton#CloseBtn">
                <Setter Property="VerticalAlignment" Value="Top" />
            </Style>
        </Style>

        <Style Selector="^:not(:has-description)">
            <Style Selector="^ /template/ atom|IconButton#CloseBtn">
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
        </Style>
        <Style Selector="^ /template/ atom|IconButton#CloseBtn">
            <Setter Property="IconWidth" Value="{DynamicResource {x:Static atom:SharedTokenKey.IconSizeSM}}" />
            <Setter Property="IconHeight" Value="{DynamicResource {x:Static atom:SharedTokenKey.IconSizeSM}}" />
            <Setter Property="Margin" Value="{DynamicResource {x:Static atom:AlertTokenKey.ExtraElementMargin}}" />
            <Setter Property="NormalIconBrush" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorIcon}}" />
            <Setter Property="ActiveIconBrush" Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorIconHover}}" />
            <Setter Property="SelectedIconBrush"
                    Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorIconHover}}" />
        </Style>

        <Style Selector="^[Type=Success]">
            <Style Selector="^ /template/ atom|Icon#InfoIcon">
                <Setter Property="IconInfo" Value="{atom:IconInfoProvider Kind=CheckCircleFilled}" />
                <Setter Property="NormalFilledBrush"
                        Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorSuccess}}" />
            </Style>
        </Style>

        <Style Selector="^[Type=Info]">
            <Style Selector="^ /template/ atom|Icon#InfoIcon">
                <Setter Property="IconInfo" Value="{atom:IconInfoProvider Kind=InfoCircleFilled}" />
                <Setter Property="NormalFilledBrush"
                        Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorPrimary}}" />
            </Style>
        </Style>

        <Style Selector="^[Type=Warning]">
            <Style Selector="^ /template/ atom|Icon#InfoIcon">
                <Setter Property="IconInfo" Value="{atom:IconInfoProvider Kind=ExclamationCircleFilled}" />
                <Setter Property="NormalFilledBrush"
                        Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorWarning}}" />
            </Style>
        </Style>

        <Style Selector="^[Type=Error]">
            <Style Selector="^ /template/ atom|Icon#InfoIcon">
                <Setter Property="IconInfo" Value="{atom:IconInfoProvider Kind=CloseCircleFilled}" />
                <Setter Property="NormalFilledBrush"
                        Value="{DynamicResource {x:Static atom:SharedTokenKey.ColorError}}" />
            </Style>
        </Style>
        <Style Selector="^:has-description">
            <Style Selector="^ /template/ atom|Icon#InfoIcon">
                <Setter Property="Width"
                        Value="{DynamicResource {x:Static atom:AlertTokenKey.WithDescriptionIconSize}}" />
                <Setter Property="Height"
                        Value="{DynamicResource {x:Static atom:AlertTokenKey.WithDescriptionIconSize}}" />
                <Setter Property="Margin"
                        Value="{DynamicResource {x:Static atom:AlertTokenKey.IconWithDescriptionMargin}}" />
                <Setter Property="VerticalAlignment" Value="Top" />
            </Style>
        </Style>

        <Style Selector="^:not(:has-description)">
            <Style Selector="^ /template/ atom|Icon#InfoIcon">
                <Setter Property="Width" Value="{DynamicResource {x:Static atom:AlertTokenKey.IconSize}}" />
                <Setter Property="Height" Value="{DynamicResource {x:Static atom:AlertTokenKey.IconSize}}" />
                <Setter Property="Margin" Value="{DynamicResource {x:Static atom:AlertTokenKey.IconDefaultMargin}}" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
        </Style>

    </ControlTheme>
</ResourceDictionary>